buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.nedap.healthcare.archie:archie-all:0.19.0'
    }
}

plugins {
    id 'base'
}

description = "tools that operate on the archie reference models and archetype object model"

import com.nedap.archie.json.JSONSchemaCreator;
import com.nedap.archie.json.JsonSchemaUriProvider;
import com.nedap.archie.json.JsonSchemaUri;
import org.openehr.referencemodels.BuiltinReferenceModels;
import javax.json.*;
import javax.json.stream.JsonGenerator;
import org.openehr.bmm.core.BmmClass;

class CustomUriProvider implements JsonSchemaUriProvider {

    Map<String, String> names = new LinkedHashMap<>();

    Map<String, String> schemas = new LinkedHashMap<>();

    private String baseUri;
    public CustomUriProvider(String baseUri) {
        this.baseUri = baseUri;
        names.put("org.openehr.rm.support.assumed_types", "Base_types")
        names.put("org.openehr.base.foundation_types", "Foundation_types")
        names.put("org.openehr.base.base_types.resource", "Resource")
        names.put("org.openehr.base.base_types", "Base_types")
        names.put("org.openehr.base", "Base_types")
        names.put("org.openehr.rm.common", "Common")
        names.put("org.openehr.rm.data_structures", "Data_structures")
        names.put("org.openehr.rm.composition", "Composition")
        names.put("org.openehr.rm.data_types", "Data_types")
        names.put("org.openehr.rm.demographic", "Demographic")
        names.put("org.openehr.rm.ehr_extract", "Ehr_extract")
        names.put("org.openehr.rm.composition.content.integration", "Integration")
        names.put("org.openehr.rm.support", "Support")

        names.put("org.openehr.rm.ehr", "Ehr")

        schemas.put("openehr_base_1.0.4", "BASE/Release-1.0.4")
        schemas.put("openehr_base_1.1.0", "BASE/Release-1.1.0")
        schemas.put("openehr_base_1.2.0", "BASE/Release-1.2.0")

        schemas.put("openehr_ehr_1.0.3", "RM/Release-1.0.3")
        schemas.put("openehr_structures_1.0.3", "RM/Release-1.0.3")
        schemas.put("openehr_ehr_extract_1.0.3", "RM/Release-1.0.3")
        schemas.put("openehr_data_types_1.0.3", "RM/Release-1.0.3")
        schemas.put("openehr_demographic_1.0.3", "RM/Release-1.0.3")
        schemas.put("openehr_basic_types_1.0.3", "RM/Release-1.0.3")
        schemas.put("openehr_primitive_types_1.0.3", "RM/Release-1.0.3")

        schemas.put("openehr_rm_ehr_1.0.4", "RM/Release-1.0.4")
        schemas.put("openehr_rm_structures_1.0.4", "RM/Release-1.0.4")
        schemas.put("openehr_rm_ehr_extract_1.0.4", "RM/Release-1.0.4")
        schemas.put("openehr_rm_data_types_1.0.4", "RM/Release-1.0.4")
        schemas.put("openehr_rm_demographic_1.0.4", "RM/Release-1.0.4")

        schemas.put("openehr_rm_ehr_1.1.0", "RM/Release-1.1.0")
        schemas.put("openehr_rm_structures_1.1.0", "RM/Release-1.1.0")
        schemas.put("openehr_rm_ehr_extract_1.1.0", "RM/Release-1.1.0")
        schemas.put("openehr_rm_data_types_1.1.0", "RM/Release-1.1.0")
        schemas.put("openehr_rm_demographic_1.1.0", "RM/Release-1.1.0")
    }



    public String getName(BmmClass bmmClass) {
        String fullPath = bmmClass.getPackage().getFullPath()
        String schemaId = bmmClass.getSourceSchemaId();
        String prefix = schemas.get(schemaId);
        if(prefix == null) {
            prefix = "";
        } else {
            prefix = prefix + "/"
        }

        for(String name:names.keySet()) {
            if(fullPath.contains(name)) {
                return prefix + names.get(name) + "/";
            }
        }
        return prefix + "/" + fullPath;
    }

    public JsonSchemaUri provideJsonSchemaUrl(BmmClass bmmClass) {
//        return new JsonSchemaUri(baseUri, bmmClass.getPackagePath() + ".json");
        System.out.println(bmmClass.getPackage().getFullPath());
        System.out.println(bmmClass.getName());
        System.out.println(bmmClass.getBmmModel().getSchemaName());
        System.out.println(bmmClass.getSourceSchemaId());
        System.out.println(getName(bmmClass) + bmmClass.getName() + ".json");

        return new JsonSchemaUri(baseUri, getName(bmmClass) + bmmClass.getName() + ".json");
    }
}

abstract class JsonSchemaCreationTask extends DefaultTask {

    private final FileSystemOperations fileSystemOperations

    @OutputDirectory
    abstract DirectoryProperty getOutputDir();

    @TaskAction
    def generateSchema() {
        def rm110 = BuiltinReferenceModels.getBmmRepository().getModel("openehr_rm_1.1.0").getModel();
        def rm104 = BuiltinReferenceModels.getBmmRepository().getModel("openehr_rm_1.0.4").getModel();
        def rm103 = BuiltinReferenceModels.getBmmRepository().getModel("openehr_rm_1.0.3").getModel();

        def schemas110Multi = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/")
                .withJsonSchemaUriProvider(new CustomUriProvider("https://specifications.openehr.org/releases/ITS-JSON/latest/components/"))
                .withFullReferences(true)
                .create(rm110);
        def schemas104Multi = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/")
                .withJsonSchemaUriProvider(new CustomUriProvider("https://specifications.openehr.org/releases/ITS-JSON/latest/components/"))
                .withFullReferences(true)
                .create(rm104);
        def schemas103Multi = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/")
                .withJsonSchemaUriProvider(new CustomUriProvider("https://specifications.openehr.org/releases/ITS-JSON/latest/components/"))
                .withFullReferences(true)
                .create(rm103);

        def schemas110 = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/")
                .splitInMultipleFiles(false)
                .create(rm110);
        def schemas104 = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/")
                .splitInMultipleFiles(false)
                .create(rm104);
        def schemas103 = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/")
                .splitInMultipleFiles(false)
                .create(rm103);
        def config = new HashMap<>();
        config.put(JsonGenerator.PRETTY_PRINTING, true);
        def jsonWriterFactory = Json.createWriterFactory(config);

        printSchemas("Components", schemas110, jsonWriterFactory);
        printSchemas("Components", schemas104, jsonWriterFactory);
        printSchemas("Components", schemas103, jsonWriterFactory);
        printSchemas("Components", schemas110Multi, jsonWriterFactory);
        printSchemas("Components", schemas104Multi, jsonWriterFactory);
        printSchemas("Components", schemas103Multi, jsonWriterFactory);

    }

    def printSchemas(String version, Map<JsonSchemaUri, JsonObject> schemas, JsonWriterFactory jsonWriterFactory) {
        for(JsonSchemaUri name:schemas.keySet()) {
            def schema = schemas.get(name);
            def versionDir = getOutputDir().get().dir(version)
            if(!versionDir.getAsFile().exists()) {
                versionDir.getAsFile().mkdir();
            }
            System.out.println(name.getFilename());
            def split = name.getFilename().split("/");
            def fileName = null;
            for(int i = 0; i < split.length-1;i++) {
                String dir = split[i];
                versionDir = versionDir.dir(dir);
                if(!versionDir.getAsFile().exists()) {
                    versionDir.getAsFile().mkdir();
                }
            }
            fileName = split[split.length-1];
         //   def directory = versionDir.dir(outputDir)
          //  if(!directory.getAsFile().exists()) {
           //     directory.getAsFile().mkdir();
           // }
            versionDir.file(fileName).getAsFile().withWriter { writer ->
                jsonWriterFactory.createWriter(writer).write(schema);
            }
        }
    }
}

// Create a task using the task type
tasks.register('generateJsonSchema', JsonSchemaCreationTask) {
    outputDir = file(layout.buildDirectory.dir('schemaOutput'))
}


